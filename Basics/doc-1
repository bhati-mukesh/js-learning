1 Inline JS - no seperate file is created for JS. JS code is written in html tag.
Example: <button onclick="alert("hello")">click me </button>

2 Internal JS - no seperate file is created for JS. JS code is written in same HTML file within script tag.
Example: <script>
         ....code
        </script>

3 External JS - seperate file is created for JS. and that file is link in HTML page
Example: <script src="path to js file" ></script>


Helper Methods
1 document.write('hello)        if we ask to print object. this method can't print object
2 alert('hello')                if we ask to print object. this method can't print object
3 console.log('hello')          this method can print object

Comments 
1 single lin - //
2 multi-line - /**/

variables
- store, access, modify, === value
- declare, assignment operator, assign value

Rules for variable Name:
- can contain digits, letter, underscore, $
- must start with letter, $ or _
- no keyword
- cannot start with number
- case sensitive - fullname vs fullname
- camelCase or under_score


const,let,var


String concatination
- 1 using + operator Example : "mukesh "+"Bhati"
- 2 templet string Example: `Hello ${variable_name}`


Data Types
1 Primitive Type (store value)
    1.1 String
    1.2 number
    1.3 Boolean
    1.4 Null (Bug in JS, null is consider as object)
    1.5 undefined 
    1.6 symbol(ES6)
2 Non-Primitive Type (store memory reference)
    2.1 Array
    2.2 Function
    2.3 Object

To check the dataType use - typeof operator (uninary operator)
Example 1 console.log(typeof "hello") 21 console.log(typeof variable_name)


Arrays - 0 index base, store sequence collection of data(any data type is possible to store)


Function
1 params - When declare/define
2 placeholder - local vars
3 arguments - when invoke/call/run


Function Express - function is store in variable. with help of variable we call the function

Object - key/value pair, methods
       - dot notation, [] brackets
Example:1 const obj1 = {
                        func1: function(){
                            ..code
                        }
                        }
Example:2 const obj2 = {
                        func1(){
                            ..code
                        }
                        }
both ways are valid

String Methods
- toLowerCase
- toUpperCase
- charAt()
- indexOf()
- trim()
- includes
- startsWith
- slice

types of loop
- for
- while
- do

other loops
- for of (use to iterate over array)
- for in (use to iterate over key of object )

Null and undefined
- both represent "no value"
- undefined: js can not find value for this
    - variable without values
    - missing function arguments
    - missing object properties
    Example: 20 + undefines => NaN
- null: developer sets the value 
    Example: 20 + null => 20

Truthy and falsy value
"",'',``,0,-0,NaN,false,null,undefined -falsy 
- all other are truthy


Global Scope vs Local Scope
- any variable outside code block {} is said to be in Global Scope
- can be access anywhere in the program
- Gotchas : name collisions, modify by mistake

Local Scope
- can not be access from outside code blocks
- if - NOT VAR


First Class Function / Callback Function / Higher Order Functions
- Functions are first class objects -stored in a variable (expression), passed as argument to another function, return
  from the function(closure)
- Higher order function - accepts another function as an argument or return another function as a result
- Callback Function - passed to a another function as an argument and executed inside that function


Array Methods
- forEach => doesn't return
- map => return new Array (poweful method), 
         does not change size of original array
         uses values from original array when making new one
- filter => does return new Array
            can manipulate the size of new array
            returns based on condition
- find => returns single instance
          return first match, if no match undefined
          great for getting unique value
- reduce => iterates, callback function
            reduces to single value - number,array,object
            1 paramater ('acc') - total of all calculation
            2 parameter ('curr') - current iteration/value


Math
- Standard built-in object : always available

Date
- 

DOM
- console.dir(document)

- getElementById('elementID') :
- getElementsByTagName('tag_name(h1)') : return list of elements, nodelist : array like object, 
                                         index, length property but  not array methods
                                         convert nodelist to array bu using spreadOperator ([...nodeList_var])
- getElementsByClassName('class_name') : return list of elements, nodelist : array like object, 
                                         index, length property but  not array methods
                                         convert nodelist to array bu using spreadOperator ([...nodeList_var])
- querySelector('any css) : select Single
- querySelectorAll('any css') : select all (forEach and all are applicable)
   
element.childrenNode => array of nodes(NodeList) including text node
element.children => array of nodes 


Navigating DOM
- children : returns all childNodes excluding whitespace which is treated as a text node
- firstChild : possible it would be text node. use 2 time in chaining fashion
- lastChild : possible it would be text node. use 2 time in chaining fashion
- childrenNode : returns all childNodes including whitespace which is treated as a text node

Navigating Up
- element.parentNode : retrun ParentNode of given element.
- element.parentElement : retrun ParentNode of given element.


Navigating to Siblings (if sibling is not present/available null will be written)
- previousSiblings : return textNode (use in chaining to get elementNode)
- nextSiblings : return textNode (use in chaining to get elementNode)
- previousElementSibling : return element not textNode(exclude)
- nextElementSibling : return element not textNode(exclude)


Text value of Element
- nodeValue: element.childNodes[0].nodeValue (need extra step because of textNode(whitespace))
- textContent : element.textContent (no need of extra step)


getAttribute & setAttribute
- getAttribute: element.getAttribute('class') //return class name in single string
- getAttribute: element.setAttribute('class','myclass custom-class') //set the class property to element


classList and className
- className - use to get and set class attribute of an element (element.className(get), element.className="demo"(set))
- classList - use to add and remove classes on element (element.classList.add('demo'),element.classList.add('demo')element.classList.remove('demo') and element.classList.contains('demo')(return boolean value))


createElement , createTextNode and appendChild
- document.createElement("tag_name")(example: div)


insertBefore
- insertBefore(element,'location')
- Example  const element2 = document.getElementById('elem2')
           document.body.insertBefore(element,element2)

replaceChild
- replaceChild(new,old)


InnerText && prepend
- prepend (opposite of append)


remove & removeChild
- element.remove()
- parentElement.removeChild('child_element')

Note:
const parentDiv = document.querySelector('#parent')
const headings = parentDiv.querySelector('h1') // return all h1 which are inside parentDiv and in whole body

Events 
- Mouse Events
    - click
    - mousedown -  button is pressed
    - mouseup - button is released
    - mouseenter - moved onto an element
    - mouseleave - moved out of an element

- key Events
    - keypress - when key is press
    - keydown - when key is down
    - keyup - when key is released

Event Object
Example: pointing to element on which event is fire
const heading = document.getElementById("b1")
heading.addEventListener('click',function(e){
    console.log(e.currentTarget)
    e.currentTarget.classList.add("blue")
    console.log(e.type)
    console.log(this)
})

Difference between currentTarget and target
- currentTarget: always refers to the element to which the event handler has been attached to
- target: identifies the element on which the event occured

lecture(92)
Event Propagation: order the events are fired
Event Bubbling: click element first then bubbles up -- default
Event Capturing: fires at the root and fires until reaches target

Web storage API - provided by browser
session storage, local storage,
setItem, getItem, removeItem, clear

localStorage.setItem('name','john')
sessionStorage.setItem('name','john')



======== Objects ========
object is collection of key (proprty) value pairs
property value can be strings, numbers, booleans, arrays and functions however if the property value is a function it's called a method

object literal syntax- {}
dot notation 

========= this ==========
abc.func()
- watch before function if there is object before notation then this will represent that object

- In regular functions (not arrow) "this" is determined by "HOW"!!! a function is invoked(left of .)
- default to global - windows
- arrow functions - pump the breaks


Factory Function :
Constructor Function (common practice to use firstletter Capital)
- new(keyword) => create new object, points to it and omit return

Example:
const Person = function(firstName,lastName){
    this.firstName = firstName
    this.lastName = lastName
    this.fullName = function(){
        console.log(`This Is ${firstName}`)
    }
    console.log("just printing the scope",this)
}

const mukesh = new Person("mukesh","bhati")  // now this point to mukesh Object
mukesh.fullName()  // This is mukesh

const person1 = Person("per","son")   // now here -> "this" will point to window object
person1.fullName()   // Error, bcuz it will return undefined. 


Constructor Property:
- All objects in javascript have access to constructor property that returns a constructor function that created it.
- built in constructor functions
- arrays and functions are objects in javascript

Example -1:
const Person = function(firstName,lastName){
    this.firstName = firstName
    this.lastName = lastName
    this.fullName = function(){
        console.log(`This Is ${firstName}`)
    }
    console.log("just printing the scope",this)
}

const mukesh = new Person("mukesh","bhati")  // now this point to mukesh Object
console.log(mukesh.constructor)  // return constructor object but will display as object(bcuz function are objects in js)

Example - 2:
const bob = {};
console.log(bob.constructor)     // return constructor function 

Example - 3:
const list = []
console.log(list.constructor)   

Example - 4 :
const sayHi = function(){}
console.log(sayHi.constructor)

***
Example - 5 :
const susy = new mukesh.constructor('susy','carpenter');   // mukesh refere to previously create object. with help of that we can create new object
susy.fullName() // return fullName of susy


Prototype:
- Prototypal Inheritance Modal
js uses prototypal inheritance modal. that means that every constructor function/class  has a 
prototype property that is shared by every instance of the constructor/class. so any properties and 
methods or prototype can be accessed by every instance. prototype property returns a object 

Example:
function Account(name,initialBalance){
    this.name = name;
    this.balance = initialBalance;
}

console.log(Account.prototype)

const john = new Account('john',200);
const bob = new Account('bob',0);


Account.prototype.bank = "IndusInd";
Account.prototype.deposit = function(amount){
    this.balance += amount
    console.log(`Hello ${this.name}, your balance is ${this.balance} `)
};
console.log(john.bank)
console.log(bob)

john.deposit(3000)

Property lookup in js
- If child does not have ask parent for Everything in JS is an Object;

Class
ES-6 classes - syntatic sugar
prototype Inheritance

Example:
class Account{
    constructor(name,initialBalance){
        this.name = name
        this.balance = initialBalance
    }
    back = city           //property will be goes into each n every object(instance)
    deposit(amount){       //methods will be goes into prototype
    this.balance += amount
    console.log(`Hello ${this.name}, your balance is ${this.balance} `)
    }
}

const john = new Account("john",200);
console.log(john)                     // look at prototype
console.log(john.name)
john.deposit(500)
console.log(john.bank)

const bob = new Account("bob",200);
console.log(bob)                     // look at prototype
console.log(bob.name)
bob.deposit(500)
console.log(bob.bank)


- Call, Bind, Apply
- call- runs instantly, arguments - list of items
- apply - runs instantly, arguments - array of items
- call n apply are same just differ 
- in func.call(obj,arg1,arg2,arg3) and for func.apply(obj,[1,2,3,])
- with help of call we can call any method on any object
Example
function printName(){
    console.log(`I'm ${this.name}`)
}

const mukesh = {
    name : "mukesh"
}
const xyz = {
    name : "xyz"
}

printName.call(mukesh)  // call paramter contains, where this should be point for printName method
printName.call(xyz)
printName.call({name:"new"})  // even this can be point to new object

Apply - assign, use later, arguments - list of items
const tempMethod = printName.apply(mukesh)

tempMethod()            // we can call letter

Example for button
will see in next video


Functions Section
1 IIFE immediately -Invoked function expression
  older approach - new Modules
  simple approach to avoid global scope pollution
  good way at protecting the scope of your function and the varibles within it
  global namespace, extra steps

Example 
  (function(){
      const num1 = 10
      const num2 = 20
      console.log(`total is ${num1 + num2}`)
  })()
  // passing arguments
  (function(num1,num2){
      console.log(`total is ${num1 + num2}`)
  })(10,20)
  // returning value
  const result = (function(num1,num2){
      return num1+num2
    })(10,20)

2 Hoisting
  function and var declaration are hoisted
  safer to access only after initialized

3 closure
   closure gives you an access to an outer function's scope from inner function
   make private variables with closures

Example
    function outer(){
        let privateVar = 'secret'
        function inner(){
            console.log(`hello there secret is: ${privateVar}`)
        }
        return inner
    }
var value = outer()  
value() // hello there secret is secret - even after execution context of outer is over still we ca access outer function variables

scopes
function scope - var
block scope - let n const - anything within {}
example
var total = 1000
var test = true
if(test){
    var total = `apples and orange`
    console.log(`hello there`)
}
console.log(total)  // apples and oranges -- bcuz var is function not block scope


String literals 
tagged template literals
Example
const author = 'some Author'
const statement = 'some Statement'

const quote = highlight`Here is the ${statement} by ${author} and it could not be more true`;
console.log(quote)  //highlight is a function

function highlight(text,...args){
    const awesomeText = text.map((item,index)=>{
        return `${item} <strong class="blue">${args[index] || ""}</strong>`
    });
    retrun awesomeText.join("")
}

Arrow function or Fat arrow function
no name, always expression,assign to variable
no function keyword
'this'
// regular function : 'this' refers parent, left of the dot
// arrow function : refers to it's current surrounding scope

Destructuring
faster/easier way to access/unpack values from array 
object into variables
Array

new string methods in ES6
startsWith(),endsWith(),includes(),repeat()

for of - loops through the values of an iterables object
string, array, map, set, etc - Not object
unlike forEach - we can use break and continue

spread operator
Allows an iterables to spread/expand individually inside reciever
split into single items and copy them

rest operator
gathers/collects the items

Array.from and Array.of - Not on the Prototype
Array.from
Array.of
of - creates a new Array instance from a variable number of arguments
from - returns Array object from any object with a length property or an iterable object
from - turns array-like/ish into array - string,nodeList,set
Example
const friends = Array.of('john',2,true)  //create a new array
const udemy = Array.from("udemy")


Modules
named/default -export 