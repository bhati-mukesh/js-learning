1 Inline JS - no seperate file is created for JS. JS code is written in html tag.
Example: <button onclick="alert("hello")">click me </button>

2 Internal JS - no seperate file is created for JS. JS code is written in same HTML file within script tag.
Example: <script>
         ....code
        </script>

3 External JS - seperate file is created for JS. and that file is link in HTML page
Example: <script src="path to js file" ></script>


Helper Methods
1 document.write('hello)        if we ask to print object. this method can't print object
2 alert('hello')                if we ask to print object. this method can't print object
3 console.log('hello')          this method can print object

Comments 
1 single lin - //
2 multi-line - /**/

variables
- store, access, modify, === value
- declare, assignment operator, assign value

Rules for variable Name:
- can contain digits, letter, underscore, $
- must start with letter, $ or _
- no keyword
- cannot start with number
- case sensitive - fullname vs fullname
- camelCase or under_score


const,let,var


String concatination
- 1 using + operator Example : "mukesh "+"Bhati"
- 2 templet string Example: `Hello ${variable_name}`


Data Types
1 Primitive Type (store value)
    1.1 String
    1.2 number
    1.3 Boolean
    1.4 Null (Bug in JS, null is consider as object)
    1.5 undefined 
    1.6 symbol(ES6)
2 Non-Primitive Type (store memory reference)
    2.1 Array
    2.2 Function
    2.3 Object

To check the dataType use - typeof operator (uninary operator)
Example 1 console.log(typeof "hello") 21 console.log(typeof variable_name)


Arrays - 0 index base, store sequence collection of data(any data type is possible to store)


Function
1 params - When declare/define
2 placeholder - local vars
3 arguments - when invoke/call/run


Function Express - function is store in variable. with help of variable we call the function

Object - key/value pair, methods
       - dot notation, [] brackets
Example:1 const obj1 = {
                        func1: function(){
                            ..code
                        }
                        }
Example:2 const obj2 = {
                        func1(){
                            ..code
                        }
                        }
both ways are valid

String Methods
- toLowerCase
- toUpperCase
- charAt()
- indexOf()
- trim()
- includes
- startsWith
- slice

types of loop
- for
- while
- do

other loops
- for of (use to iterate over array)
- for in (use to iterate over key of object )

Null and undefined
- both represent "no value"
- undefined: js can not find value for this
    - variable without values
    - missing function arguments
    - missing object properties
    Example: 20 + undefines => NaN
- null: developer sets the value 
    Example: 20 + null => 20

Truthy and falsy value
"",'',``,0,-0,NaN,false,null,undefined -falsy 
- all other are truthy


Global Scope vs Local Scope
- any variable outside code block {} is said to be in Global Scope
- can be access anywhere in the program
- Gotchas : name collisions, modify by mistake
