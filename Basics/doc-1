1 Inline JS - no seperate file is created for JS. JS code is written in html tag.
Example: <button onclick="alert("hello")">click me </button>

2 Internal JS - no seperate file is created for JS. JS code is written in same HTML file within script tag.
Example: <script>
         ....code
        </script>

3 External JS - seperate file is created for JS. and that file is link in HTML page
Example: <script src="path to js file" ></script>


Helper Methods
1 document.write('hello)        if we ask to print object. this method can't print object
2 alert('hello')                if we ask to print object. this method can't print object
3 console.log('hello')          this method can print object

Comments 
1 single lin - //
2 multi-line - /**/

variables
- store, access, modify, === value
- declare, assignment operator, assign value

Rules for variable Name:
- can contain digits, letter, underscore, $
- must start with letter, $ or _
- no keyword
- cannot start with number
- case sensitive - fullname vs fullname
- camelCase or under_score


const,let,var


String concatination
- 1 using + operator Example : "mukesh "+"Bhati"
- 2 templet string Example: `Hello ${variable_name}`


Data Types
1 Primitive Type (store value)
    1.1 String
    1.2 number
    1.3 Boolean
    1.4 Null (Bug in JS, null is consider as object)
    1.5 undefined 
    1.6 symbol(ES6)
2 Non-Primitive Type (store memory reference)
    2.1 Array
    2.2 Function
    2.3 Object

To check the dataType use - typeof operator (uninary operator)
Example 1 console.log(typeof "hello") 21 console.log(typeof variable_name)


Arrays - 0 index base, store sequence collection of data(any data type is possible to store)


Function
1 params - When declare/define
2 placeholder - local vars
3 arguments - when invoke/call/run


Function Express - function is store in variable. with help of variable we call the function

Object - key/value pair, methods
       - dot notation, [] brackets
Example:1 const obj1 = {
                        func1: function(){
                            ..code
                        }
                        }
Example:2 const obj2 = {
                        func1(){
                            ..code
                        }
                        }
both ways are valid

String Methods
- toLowerCase
- toUpperCase
- charAt()
- indexOf()
- trim()
- includes
- startsWith
- slice

types of loop
- for
- while
- do

other loops
- for of (use to iterate over array)
- for in (use to iterate over key of object )

Null and undefined
- both represent "no value"
- undefined: js can not find value for this
    - variable without values
    - missing function arguments
    - missing object properties
    Example: 20 + undefines => NaN
- null: developer sets the value 
    Example: 20 + null => 20

Truthy and falsy value
"",'',``,0,-0,NaN,false,null,undefined -falsy 
- all other are truthy


Global Scope vs Local Scope
- any variable outside code block {} is said to be in Global Scope
- can be access anywhere in the program
- Gotchas : name collisions, modify by mistake

Local Scope
- can not be access from outside code blocks
- if - NOT VAR


First Class Function / Callback Function / Higher Order Functions
- Functions are first class objects -stored in a variable (expression), passed as argument to another function, return
  from the function(closure)
- Higher order function - accepts another function as an argument or return another function as a result
- Callback Function - passed to a another function as an argument and executed inside that function


Array Methods
- forEach => doesn't return
- map => return new Array (poweful method), 
         does not change size of original array
         uses values from original array when making new one
- filter => does return new Array
            can manipulate the size of new array
            returns based on condition
- find => returns single instance
          return first match, if no match undefined
          great for getting unique value
- reduce => iterates, callback function
            reduces to single value - number,array,object
            1 paramater ('acc') - total of all calculation
            2 parameter ('curr') - current iteration/value


Math
- Standard built-in object : always available

Date
- 

DOM
- console.dir(document)

- getElementById('elementID') :
- getElementsByTagName('tag_name(h1)') : return list of elements, nodelist : array like object, 
                                         index, length property but  not array methods
                                         convert nodelist to array bu using spreadOperator ([...nodeList_var])
- getElementsByClassName('class_name') : return list of elements, nodelist : array like object, 
                                         index, length property but  not array methods
                                         convert nodelist to array bu using spreadOperator ([...nodeList_var])
- querySelector('any css) : select Single
- querySelectorAll('any css') : select all (forEach and all are applicable)
   
element.childrenNode => array of nodes(NodeList) including text node
element.children => array of nodes 


Navigating DOM
- children : returns all childNodes excluding whitespace which is treated as a text node
- firstChild : possible it would be text node. use 2 time in chaining fashion
- lastChild : possible it would be text node. use 2 time in chaining fashion
- childrenNode : returns all childNodes including whitespace which is treated as a text node

Navigating Up
- element.parentNode : retrun ParentNode of given element.
- element.parentElement : retrun ParentNode of given element.


Navigating to Siblings (if sibling is not present/available null will be written)
- previousSiblings : return textNode (use in chaining to get elementNode)
- nextSiblings : return textNode (use in chaining to get elementNode)
- previousElementSibling : return element not textNode(exclude)
- nextElementSibling : return element not textNode(exclude)


Text value of Element
- nodeValue: element.childNodes[0].nodeValue (need extra step because of textNode(whitespace))
- textContent : element.textContent (no need of extra step)


getAttribute & setAttribute
- getAttribute: element.getAttribute('class') //return class name in single string
- getAttribute: element.setAttribute('class','myclass custom-class') //set the class property to element


classList and className
- className - use to get and set class attribute of an element (element.className(get), element.className="demo"(set))
- classList - use to add and remove classes on element (element.classList.add('demo'),element.classList.add('demo')element.classList.remove('demo') and element.classList.contains('demo')(return boolean value))


createElement , createTextNode and appendChild
- document.createElement("tag_name")(example: div)


insertBefore
- insertBefore(element,'location')
- Example  const element2 = document.getElementById('elem2')
           document.body.insertBefore(element,element2)

replaceChild
- replaceChild(new,old)


InnerText && prepend
- prepend (opposite of append)


remove & removeChild
- element.remove()
- parentElement.removeChild('child_element')

Note:
const parentDiv = document.querySelector('#parent')
const headings = parentDiv.querySelector('h1') // return all h1 which are inside parentDiv and in whole body

Events 
- Mouse Events
    - click
    - mousedown -  button is pressed
    - mouseup - button is released
    - mouseenter - moved onto an element
    - mouseleave - moved out of an element

- key Events
    - keypress - when key is press
    - keydown - when key is down
    - keyup - when key is released

Event Object
Example: pointing to element on which event is fire
const heading = document.getElementById("b1")
heading.addEventListener('click',function(e){
    console.log(e.currentTarget)
    e.currentTarget.classList.add("blue")
    console.log(e.type)
    console.log(this)
})

Difference between currentTarget and target
- currentTarget: always refers to the element to which the event handler has been attached to
- target: identifies the element on which the event occured

lecture(92)
Event Propagation: order the events are fired
Event Bubbling: click element first then bubbles up -- default
Event Capturing: fires at the root and fires until reaches target

Web storage API - provided by browser
session storage, local storage,
setItem, getItem, removeItem, clear

localStorage.setItem('name','john')
sessionStorage.setItem('name','john')















































